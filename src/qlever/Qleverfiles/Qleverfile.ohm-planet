# Qleverfile for OHM Planet, use with https://github.com/ad-freiburg/qlever-control
#
# qlever get-data  # ~20 mins (download PBF, convert to TTL, add GeoSPARQL triples)
# qlever index     # ~10 mins and ~5 GB RAM (on an AMD Ryzen 9 5900X)
# qlever start     # start the server (instantaneous)
#
# For `qlever get-data` to work, `osm2rdf` and `spatialjoin` must be installed
# and included in the `PATH`.

[data]
NAME           = ohm-planet
GET_DATA_URL   = $$(curl -s https://planet.openhistoricalmap.org/planet/state.txt)
GET_DATA_CMD_1 = curl -LRfC - -o ${NAME}.pbf ${GET_DATA_URL} 
GET_DATA_CMD_2 = osm2rdf ${NAME}.pbf -o ${NAME}.ttl --source-dataset OHM --simplify-wkt 0 --write-ogc-geo-triples none 2>&1 | tee ${NAME}.osm2rdf-log.txt
GET_DATA_CMD_3 = bzcat ${NAME}.ttl.bz2 | \grep "^osm2rdf" | sed -En 's/^osm2rdf(geom)?:(ohm_)?(node|rel|way)[a-z]*_([0-9]+) geo:asWKT "([^\"]+)".*/ohm\3:\4\t\5/p' | tee ${NAME}.spatialjoin-input.tsv | spatialjoin --contains ' ogc:sfContains ' --intersects ' ogc:sfIntersects ' --suffix $$' .\n' -o ${NAME}.spatialjoin-triples.ttl.bz2 2>&1 | tee ${NAME}.spatialjoin-log.txt && rm -f areas events lines points simplelines
GET_DATA_CMD   = ${GET_DATA_CMD_1} && echo && ${GET_DATA_CMD_2} && echo && ${GET_DATA_CMD_3} && bzcat ${NAME}.ttl.bz2 | head -100 | \grep "^@prefix" > ${NAME}.prefix-definitions
VERSION        = $$(date -r ${NAME}.pbf +%d.%m.%Y || echo "NO_DATE")
DESCRIPTION    = OHM Planet, data from ${GET_DATA_URL} version ${VERSION} (with GeoSPARQL predicates ogc:sfContains and ogc:sfIntersects)

[index]
INPUT_FILES      = ${data:NAME}.prefix-definitions ${data:NAME}.spatialjoin-triples.ttl.bz2 ${data:NAME}.ttl.bz2
CAT_INPUT_FILES  = bzcat -f ${INPUT_FILES}
SETTINGS_JSON    = { "prefixes-external": [""], "ascii-prefixes-only": false, "parallel-parsing": true, "num-triples-per-batch": 5000000 }

[server]
PORT               = 7037
ACCESS_TOKEN       = ${data:NAME}_32673264324
MEMORY_FOR_QUERIES = 10G
CACHE_MAX_SIZE     = 5G
WARMUP_CMD         = curl -s http://localhost:${PORT} -H "Accept: application/qlever-results+json" --data-urlencode "query=PREFIX geo: <http://www.opengis.net/ont/geosparql#> SELECT ?subject ?geometry WHERE { ?subject geo:hasGeometry ?m . ?m geo:asWKT ?geometry } INTERNAL SORT BY ?subject" --data-urlencode "access-token=${server:ACCESS_TOKEN}" --data-urlencode "pinresult=true" --data-urlencode "send=0" | jq .resultsize | xargs printf "Result size: %'d\n"


[runtime]
SYSTEM = native

[ui]
CONFIG = ohm-planet
